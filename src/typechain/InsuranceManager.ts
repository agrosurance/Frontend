/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface InsuranceManagerInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addSimulatedRequestId(address,bytes32)": FunctionFragment;
    "buyInsurance(bytes32)": FunctionFragment;
    "chainlinkFunctionGasLimit()": FunctionFragment;
    "chainlinkSubscriptionId()": FunctionFragment;
    "checkInsuranceStatusCode()": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": FunctionFragment;
    "fundManager()": FunctionFragment;
    "getDONPublicKey()": FunctionFragment;
    "getInsuranceQuotes(uint256,uint256,uint256)": FunctionFragment;
    "handleOracleFulfillment(bytes32,bytes,bytes)": FunctionFragment;
    "insuranceHistory(uint256,uint256)": FunctionFragment;
    "insurancePremiumCalculatorCode()": FunctionFragment;
    "landsContract()": FunctionFragment;
    "owner()": FunctionFragment;
    "quoteRequests(bytes32)": FunctionFragment;
    "requestTypes(bytes32)": FunctionFragment;
    "secrets()": FunctionFragment;
    "setChainlinkFunctionGasLimit(uint32)": FunctionFragment;
    "setChainlinkSubscriptionId(uint64)": FunctionFragment;
    "setInsurancePremiumCalculatorCode(string)": FunctionFragment;
    "setSecrets(bytes)": FunctionFragment;
    "totalInsurances(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateOracleAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "addSimulatedRequestId"
      | "buyInsurance"
      | "chainlinkFunctionGasLimit"
      | "chainlinkSubscriptionId"
      | "checkInsuranceStatusCode"
      | "claim"
      | "estimateCost"
      | "fundManager"
      | "getDONPublicKey"
      | "getInsuranceQuotes"
      | "handleOracleFulfillment"
      | "insuranceHistory"
      | "insurancePremiumCalculatorCode"
      | "landsContract"
      | "owner"
      | "quoteRequests"
      | "requestTypes"
      | "secrets"
      | "setChainlinkFunctionGasLimit"
      | "setChainlinkSubscriptionId"
      | "setInsurancePremiumCalculatorCode"
      | "setSecrets"
      | "totalInsurances"
      | "transferOwnership"
      | "updateOracleAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSimulatedRequestId",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyInsurance",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkFunctionGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkSubscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkInsuranceStatusCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCost",
    values: [
      {
        codeLocation: PromiseOrValue<BigNumberish>;
        secretsLocation: PromiseOrValue<BigNumberish>;
        language: PromiseOrValue<BigNumberish>;
        source: PromiseOrValue<string>;
        secrets: PromiseOrValue<BytesLike>;
        args: PromiseOrValue<string>[];
      },
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDONPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceQuotes",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceHistory",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "insurancePremiumCalculatorCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "landsContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteRequests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTypes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "secrets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setChainlinkFunctionGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkSubscriptionId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInsurancePremiumCalculatorCode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecrets",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalInsurances",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOracleAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSimulatedRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkFunctionGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkInsuranceStatusCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceQuotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurancePremiumCalculatorCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "landsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "secrets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkFunctionGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInsurancePremiumCalculatorCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSecrets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalInsurances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOracleAddress",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestFulfilled(bytes32)": EventFragment;
    "RequestSent(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
}

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestFulfilledEventObject {
  id: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
  id: string;
}
export type RequestSentEvent = TypedEvent<[string], RequestSentEventObject>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface InsuranceManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InsuranceManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSimulatedRequestId(
      oracleAddress: PromiseOrValue<string>,
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyInsurance(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chainlinkFunctionGasLimit(overrides?: CallOverrides): Promise<[number]>;

    chainlinkSubscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkInsuranceStatusCode(overrides?: CallOverrides): Promise<[string]>;

    claim(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateCost(
      req: {
        codeLocation: PromiseOrValue<BigNumberish>;
        secretsLocation: PromiseOrValue<BigNumberish>;
        language: PromiseOrValue<BigNumberish>;
        source: PromiseOrValue<string>;
        secrets: PromiseOrValue<BytesLike>;
        args: PromiseOrValue<string>[];
      },
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fundManager(overrides?: CallOverrides): Promise<[string]>;

    getDONPublicKey(overrides?: CallOverrides): Promise<[string]>;

    getInsuranceQuotes(
      landId: PromiseOrValue<BigNumberish>,
      coverageTill: PromiseOrValue<BigNumberish>,
      coverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insuranceHistory(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    insurancePremiumCalculatorCode(
      overrides?: CallOverrides
    ): Promise<[string]>;

    landsContract(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quoteRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        boolean,
        boolean
      ] & {
        requestId: string;
        owner: string;
        landId: BigNumber;
        premium: BigNumber;
        coverage: BigNumber;
        cropId: BigNumber;
        insuranceFrom: BigNumber;
        insuranceTo: BigNumber;
        isRequestFulfilled: boolean;
        latestResponse: string;
        latestError: string;
        isInsured: boolean;
        isInsuranceClaimed: boolean;
      }
    >;

    requestTypes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    secrets(overrides?: CallOverrides): Promise<[string]>;

    setChainlinkFunctionGasLimit(
      _chainlinkFunctionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainlinkSubscriptionId(
      _chainlinkSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInsurancePremiumCalculatorCode(
      _insurancePremiumCalculatorCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSecrets(
      _secrets: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalInsurances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOracleAddress(
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSimulatedRequestId(
    oracleAddress: PromiseOrValue<string>,
    requestId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyInsurance(
    requestId: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chainlinkFunctionGasLimit(overrides?: CallOverrides): Promise<number>;

  chainlinkSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  checkInsuranceStatusCode(overrides?: CallOverrides): Promise<string>;

  claim(
    requestId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateCost(
    req: {
      codeLocation: PromiseOrValue<BigNumberish>;
      secretsLocation: PromiseOrValue<BigNumberish>;
      language: PromiseOrValue<BigNumberish>;
      source: PromiseOrValue<string>;
      secrets: PromiseOrValue<BytesLike>;
      args: PromiseOrValue<string>[];
    },
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundManager(overrides?: CallOverrides): Promise<string>;

  getDONPublicKey(overrides?: CallOverrides): Promise<string>;

  getInsuranceQuotes(
    landId: PromiseOrValue<BigNumberish>,
    coverageTill: PromiseOrValue<BigNumberish>,
    coverage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleOracleFulfillment(
    requestId: PromiseOrValue<BytesLike>,
    response: PromiseOrValue<BytesLike>,
    err: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insuranceHistory(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  insurancePremiumCalculatorCode(overrides?: CallOverrides): Promise<string>;

  landsContract(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  quoteRequests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      boolean,
      boolean
    ] & {
      requestId: string;
      owner: string;
      landId: BigNumber;
      premium: BigNumber;
      coverage: BigNumber;
      cropId: BigNumber;
      insuranceFrom: BigNumber;
      insuranceTo: BigNumber;
      isRequestFulfilled: boolean;
      latestResponse: string;
      latestError: string;
      isInsured: boolean;
      isInsuranceClaimed: boolean;
    }
  >;

  requestTypes(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  secrets(overrides?: CallOverrides): Promise<string>;

  setChainlinkFunctionGasLimit(
    _chainlinkFunctionGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainlinkSubscriptionId(
    _chainlinkSubscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInsurancePremiumCalculatorCode(
    _insurancePremiumCalculatorCode: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSecrets(
    _secrets: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalInsurances(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOracleAddress(
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addSimulatedRequestId(
      oracleAddress: PromiseOrValue<string>,
      requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyInsurance(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    chainlinkFunctionGasLimit(overrides?: CallOverrides): Promise<number>;

    chainlinkSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    checkInsuranceStatusCode(overrides?: CallOverrides): Promise<string>;

    claim(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    estimateCost(
      req: {
        codeLocation: PromiseOrValue<BigNumberish>;
        secretsLocation: PromiseOrValue<BigNumberish>;
        language: PromiseOrValue<BigNumberish>;
        source: PromiseOrValue<string>;
        secrets: PromiseOrValue<BytesLike>;
        args: PromiseOrValue<string>[];
      },
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundManager(overrides?: CallOverrides): Promise<string>;

    getDONPublicKey(overrides?: CallOverrides): Promise<string>;

    getInsuranceQuotes(
      landId: PromiseOrValue<BigNumberish>,
      coverageTill: PromiseOrValue<BigNumberish>,
      coverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    insuranceHistory(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    insurancePremiumCalculatorCode(overrides?: CallOverrides): Promise<string>;

    landsContract(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    quoteRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        boolean,
        boolean
      ] & {
        requestId: string;
        owner: string;
        landId: BigNumber;
        premium: BigNumber;
        coverage: BigNumber;
        cropId: BigNumber;
        insuranceFrom: BigNumber;
        insuranceTo: BigNumber;
        isRequestFulfilled: boolean;
        latestResponse: string;
        latestError: string;
        isInsured: boolean;
        isInsuranceClaimed: boolean;
      }
    >;

    requestTypes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    secrets(overrides?: CallOverrides): Promise<string>;

    setChainlinkFunctionGasLimit(
      _chainlinkFunctionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkSubscriptionId(
      _chainlinkSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInsurancePremiumCalculatorCode(
      _insurancePremiumCalculatorCode: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSecrets(
      _secrets: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalInsurances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOracleAddress(
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RequestFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;

    "RequestSent(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestSentEventFilter;
    RequestSent(id?: PromiseOrValue<BytesLike> | null): RequestSentEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSimulatedRequestId(
      oracleAddress: PromiseOrValue<string>,
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyInsurance(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chainlinkFunctionGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    checkInsuranceStatusCode(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateCost(
      req: {
        codeLocation: PromiseOrValue<BigNumberish>;
        secretsLocation: PromiseOrValue<BigNumberish>;
        language: PromiseOrValue<BigNumberish>;
        source: PromiseOrValue<string>;
        secrets: PromiseOrValue<BytesLike>;
        args: PromiseOrValue<string>[];
      },
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundManager(overrides?: CallOverrides): Promise<BigNumber>;

    getDONPublicKey(overrides?: CallOverrides): Promise<BigNumber>;

    getInsuranceQuotes(
      landId: PromiseOrValue<BigNumberish>,
      coverageTill: PromiseOrValue<BigNumberish>,
      coverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insuranceHistory(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insurancePremiumCalculatorCode(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    landsContract(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quoteRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestTypes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    secrets(overrides?: CallOverrides): Promise<BigNumber>;

    setChainlinkFunctionGasLimit(
      _chainlinkFunctionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainlinkSubscriptionId(
      _chainlinkSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInsurancePremiumCalculatorCode(
      _insurancePremiumCalculatorCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSecrets(
      _secrets: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalInsurances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOracleAddress(
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSimulatedRequestId(
      oracleAddress: PromiseOrValue<string>,
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyInsurance(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chainlinkFunctionGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlinkSubscriptionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkInsuranceStatusCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateCost(
      req: {
        codeLocation: PromiseOrValue<BigNumberish>;
        secretsLocation: PromiseOrValue<BigNumberish>;
        language: PromiseOrValue<BigNumberish>;
        source: PromiseOrValue<string>;
        secrets: PromiseOrValue<BytesLike>;
        args: PromiseOrValue<string>[];
      },
      subscriptionId: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDONPublicKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInsuranceQuotes(
      landId: PromiseOrValue<BigNumberish>,
      coverageTill: PromiseOrValue<BigNumberish>,
      coverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insuranceHistory(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insurancePremiumCalculatorCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    landsContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestTypes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secrets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setChainlinkFunctionGasLimit(
      _chainlinkFunctionGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkSubscriptionId(
      _chainlinkSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInsurancePremiumCalculatorCode(
      _insurancePremiumCalculatorCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSecrets(
      _secrets: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalInsurances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOracleAddress(
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
